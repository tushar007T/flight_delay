# -*- coding: utf-8 -*-
"""final project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ogylMmA6JVDYzDV1KoUPa4IMozpahJMZ

#             **Flight Delay Prediction Project**


Description:
This project involves predicting whether a flight will be delayed based on various factors like departure time, airline, and weather conditions. It's a great introduction to regression analysis and time-series data.


Objective:
To develop a regression model to predict flight delays using historical flight data.


Project Steps:

1. Data Collection and Loading
   - Download the dataset from Kaggle.
   - Load the dataset using Python libraries like pandas.
"""

# loading data set
import pandas as pd

raw_data = pd.read_csv("/content/flights.csv")

# cheking null %
raw_data.isnull().mean()*100

# Select only numerical columns
numerical_columns = raw_data.select_dtypes(include='number')

# Compute correlation of each numerical column with the target
correlation_with_target = numerical_columns.corr()['ARRIVAL_DELAY'].drop('ARRIVAL_DELAY')
correlation_with_target
raw_data.shape

# selecting most important columns for analysis

# List of unnecessary columns to drop
columns_to_drop = [
    'YEAR', 'MONTH', 'DAY', 'DAY_OF_WEEK', 'FLIGHT_NUMBER',
    'SCHEDULED_DEPARTURE', 'SCHEDULED_TIME', 'ELAPSED_TIME',
    'AIR_TIME', 'DISTANCE', 'WHEELS_ON', 'SCHEDULED_ARRIVAL',
    'ARRIVAL_TIME', 'DIVERTED', 'CANCELLED', 'SECURITY_DELAY',
    'TAIL_NUMBER', 'ORIGIN_AIRPORT', 'DESTINATION_AIRPORT',
    'DEPARTURE_TIME', 'TAXI_OUT', 'WHEELS_OFF', 'TAXI_IN',
    'CANCELLATION_REASON'
]
# Drop the columns
#raw_data = raw_data.drop(columns=[columns_to_drop], index=1)

# Check the remaining columns
revised_data = raw_data.drop(columns=columns_to_drop, index=1)
revised_data.sample(15)

revised_data.isnull().mean()*100

# filling nan values with zero
revised_data = revised_data.fillna(0)
revised_data.isnull().mean()*100

revised_data.sample(15)

# Perform One-Hot Encoding
df_encoded = pd.get_dummies(revised_data, columns=['AIRLINE'], drop_first=True)

df_encoded.corr()['ARRIVAL_DELAY']

import matplotlib.pyplot as plt

# Create scatter plots

plt.figure(figsize=(8, 5))
plt.scatter(df_encoded['DEPARTURE_DELAY'], df_encoded['ARRIVAL_DELAY'], alpha=0.5)
plt.title('DEPARTURE_DELAY vs ARRIVAL_DELAY')
plt.xlabel('DEPARTURE_DELAY')
plt.ylabel('ARRIVAL_DELAY')
plt.grid(True)
plt.show()

plt.figure(figsize=(8, 5))
plt.scatter(df_encoded['AIR_SYSTEM_DELAY'], df_encoded['ARRIVAL_DELAY'], alpha=0.5)
plt.title('AIR_SYSTEM_DELAY vs ARRIVAL_DELAY')
plt.xlabel('AIR_SYSTEM_DELAY')
plt.ylabel('ARRIVAL_DELAY')
plt.grid(True)
plt.show()

plt.figure(figsize=(8, 5))
plt.scatter(df_encoded['AIRLINE_DELAY'], df_encoded['ARRIVAL_DELAY'], alpha=0.5)
plt.title('AIRLINE_DELAY vs ARRIVAL_DELAY')
plt.xlabel('AIRLINE_DELAY')
plt.ylabel('ARRIVAL_DELAY')
plt.grid(True)
plt.show()

plt.figure(figsize=(8, 5))
plt.scatter(df_encoded['LATE_AIRCRAFT_DELAY'], df_encoded['ARRIVAL_DELAY'], alpha=0.5)
plt.title('LATE_AIRCRAFT_DELAY vs ARRIVAL_DELAY')
plt.xlabel('LATE_AIRCRAFT_DELAY	')
plt.ylabel('ARRIVAL_DELAY')
plt.grid(True)
plt.show()

plt.figure(figsize=(8, 5))
plt.scatter(df_encoded['WEATHER_DELAY'], df_encoded['ARRIVAL_DELAY'], alpha=0.5)
plt.title('WEATHER_DELAY vs ARRIVAL_DELAY')
plt.xlabel('WEATHER_DELAY')
plt.ylabel('ARRIVAL_DELAY')
plt.grid(True)
plt.show()

# model training

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, mean_squared_error
import numpy as np

# Define features (X) and target (y)
X = df_encoded.drop('ARRIVAL_DELAY', axis=1)
y = df_encoded['ARRIVAL_DELAY']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Choose a regression model
model = LinearRegression()

# Train the model
model.fit(X_train, y_train)
model.score(X_test, y_test)

# model evalution

# Make predictions
y_pred = model.predict(X_test)

# Calculate evaluation metrics
mae = mean_absolute_error(y_test, y_pred)
rmse = np.sqrt(mean_squared_error(y_test, y_pred))

# Print metrics
print(f"Mean Absolute Error (MAE): {mae}")
print(f"Root Mean Squared Error (RMSE): {rmse}")

# decision tree regressor

from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
import numpy as np

# Define features (X) and target (y)
X = df_encoded.drop('ARRIVAL_DELAY', axis=1)
y = df_encoded['ARRIVAL_DELAY']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize Decision Tree Regressor
dt_model = DecisionTreeRegressor(random_state=42)

# Train the model
dt_model.fit(X_train, y_train)
dt_model.score(X_test, y_test)

# model evaluation

# Make predictions
y_pred = dt_model.predict(X_test)

# Calculate evaluation metrics
mae = mean_absolute_error(y_test, y_pred)
rmse = np.sqrt(mean_squared_error(y_test, y_pred))

# Print metrics
print(f"Mean Absolute Error (MAE): {mae}")
print(f"Root Mean Squared Error (RMSE): {rmse}")



import matplotlib.pyplot as plt

feature_importance = dt_model.feature_importances_
features = X.columns
plt.barh(features, feature_importance)
plt.title('Feature Importance')
plt.show()

plt.scatter(y_test, dt_model.predict(X_test), alpha=0.5)
plt.title('Actual vs Predicted Arrival Delay')
plt.xlabel('Actual Arrival Delay')
plt.ylabel('Predicted Arrival Delay')
plt.grid(True)
plt.show()